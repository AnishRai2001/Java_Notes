📝 AWS S3 File Upload Flow (Spring Boot - Note)

when we are storeing only single Image

✅ 1. Add AWS S3 Config in application.properties

aws.bucket-name=springbucketbtm
aws.region=ap=
aws.access-key=
aws.secret-key=

Why?
To provide AWS credentials and region details to the application so it can connect to S3.

✅ 2. Create S3Config.java
@Configuration
public class S3Config {

    @Value("${aws.region}")
    private String region;

    @Value("${aws.access-key}")
    private String accessKey;

    @Value("${aws.secret-key}")
    private String secretKey;

    @Bean
    public S3Client s3Client() {
        AwsBasicCredentials credentials = AwsBasicCredentials.create(accessKey, secretKey);
        return S3Client.builder()
                .region(Region.of(region))
                .credentialsProvider(StaticCredentialsProvider.create(credentials))
                .build();
    }
}

Why?
This creates a singleton S3Client bean using AWS credentials. It’s used later to upload files to the S3 bucket.



✅ 3. Create S3Service.java

@Service
pub4
Why?
This service handles:

Uploading a file to S3.

Saving the image URL in the Car entity (in DB).

Returns the S3 image URL.


✅ 4. Create CarController.java

@RestController
@RequestMapping("/api/cars")
public class CarController {

    private final S3Service s3Service;

    @Autowired
    public CarController(S3Service s3Service) {
        this.s3Service = s3Service;
    }

    @PostMapping("/{bucketName}/{carId}/upload-image")
    public ResponseEntity<String> uploadCarImage(
            @PathVariable Long carId,
            @RequestParam("file") MultipartFile file
    ) {
        try {
            String imageUrl = s3Service.uploadFile(file, carId);
            return ResponseEntity.ok("Image uploaded successfully: " + imageUrl);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Failed to upload image: " + e.getMessage());
        }
    }
}

How to Explain in Interview

👉 "In my project, I implemented image upload using AWS S3. The flow was simple:

1. I stored AWS credentials and bucket details in application.properties.


2. I created a S3Config class that provides a singleton S3Client bean using AWS SDK.


3. Then I built a S3Service that handles file uploads — it prepares the PutObjectRequest, uploads to S3, and returns the file URL.


4. Finally, I exposed a REST endpoint in CarController that takes MultipartFile from client, calls the service, and responds with the uploaded image URL.



This way, whenever a user uploads an image for a Car entity, it gets stored in S3 and the image URL is stored in DB for later retrieval."
